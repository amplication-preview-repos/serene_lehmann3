/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Billing as PrismaBilling,
  User as PrismaUser,
} from "@prisma/client";

export class BillingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BillingCountArgs, "select">): Promise<number> {
    return this.prisma.billing.count(args);
  }

  async billings<T extends Prisma.BillingFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BillingFindManyArgs>
  ): Promise<PrismaBilling[]> {
    return this.prisma.billing.findMany<Prisma.BillingFindManyArgs>(args);
  }
  async billing<T extends Prisma.BillingFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BillingFindUniqueArgs>
  ): Promise<PrismaBilling | null> {
    return this.prisma.billing.findUnique(args);
  }
  async createBilling<T extends Prisma.BillingCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BillingCreateArgs>
  ): Promise<PrismaBilling> {
    return this.prisma.billing.create<T>(args);
  }
  async updateBilling<T extends Prisma.BillingUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BillingUpdateArgs>
  ): Promise<PrismaBilling> {
    return this.prisma.billing.update<T>(args);
  }
  async deleteBilling<T extends Prisma.BillingDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BillingDeleteArgs>
  ): Promise<PrismaBilling> {
    return this.prisma.billing.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.billing
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
